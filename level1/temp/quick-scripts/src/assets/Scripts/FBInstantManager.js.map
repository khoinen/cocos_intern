{"version":3,"sources":["assets/Scripts/FBInstantManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\r\n\r\nconst LEADERBOARD_NAME = 'Top escaptists.'\r\nconst DATA_KEY = 'userData'\r\n\r\n@ccclass\r\nexport default class GBInstantManager {\r\n    private static instance: GBInstantManager;\r\n\r\n    private shareImg\r\n    private playerId = ''\r\n\r\n    /**\r\n     * The Singleton's constructor should always be private to prevent direct\r\n     * construction calls with the `new` operator.\r\n     */\r\n    private constructor() { }\r\n\r\n    /**\r\n     * The static method that controls the access to the singleton instance.\r\n     *\r\n     * This implementation let you subclass the Singleton class while keeping\r\n     * just one instance of each subclass around.\r\n     */\r\n    public static getInstance(): GBInstantManager {\r\n        if (!GBInstantManager.instance) {\r\n            GBInstantManager.instance = new GBInstantManager();\r\n        }\r\n\r\n        return GBInstantManager.instance;\r\n    }\r\n\r\n    public getPlayerId() {\r\n        if (!this.playerId) {\r\n            try {\r\n                this.playerId = FBInstant.player.getID()\r\n            } catch (err) {\r\n                this.playerId = 'localId'\r\n            }\r\n        }\r\n        \r\n\r\n        if (this.playerId) return this.playerId\r\n    }\r\n\r\n    private getShareImg(cb) {\r\n        if (this.shareImg) {\r\n            return cb(this.shareImg)\r\n        }\r\n\r\n        cc.resources.load('Base64/ShareImg', (err, file) => {\r\n            this.shareImg = file.text\r\n            cb(this.shareImg)\r\n        })\r\n    }\r\n\r\n    public shareGame() {\r\n        this.getShareImg((img) => {\r\n            const sharePlayerID = FBInstant.player.getID()\r\n\r\n            FBInstant.shareAsync({\r\n                intent: 'REQUEST',\r\n                image: img,\r\n                text: \"Let's play prison escape!\",\r\n                data: { sharePlayerID },\r\n            })\r\n        })\r\n    }\r\n\r\n    public invitePlay(customData={level: 1, playerId: ''}) {\r\n        const postInvite = (leaderboardName) => {\r\n            FBInstant.getLeaderboardAsync(\r\n                leaderboardName\r\n            ).then((leaderboard) => {\r\n                return leaderboard.setScoreAsync(customData.level, '')\r\n            }).then(() => {\r\n                FBInstant.updateAsync({\r\n                    action: 'LEADERBOARD',\r\n                    name: leaderboardName,\r\n                    text: `${FBInstant.player.getName()} had passed level ${customData.level} invite you to play Escape Prison`,\r\n                }).then(() => {\r\n                    cc.log('send invite - update leaderboard')\r\n                }).catch((err) => {\r\n                    console.log('errr', err)\r\n                })\r\n\r\n            }).catch((err) => {\r\n                console.log('err', err)\r\n            })\r\n        }\r\n\r\n        let contextFunc = FBInstant.context.chooseAsync\r\n        const param = []\r\n\r\n        if (customData.playerId) {\r\n            contextFunc = FBInstant.context.createAsync\r\n            param.push(customData.playerId)\r\n        }\r\n\r\n        contextFunc(...param).then(() => {\r\n            const leaderboardName = LEADERBOARD_NAME + FBInstant.context.getID()\r\n            postInvite(leaderboardName)\r\n        }).catch((err=null) => {\r\n            console.log('fail?', err)\r\n        })\r\n    }\r\n\r\n    public getConnectedPlayers(cb) {\r\n        try {\r\n            FBInstant.player.getConnectedPlayersAsync().then(players => {\r\n                const data = players.map(p => {\r\n                    return {\r\n                        id: p.getID(),\r\n                        name: p.getName(),\r\n                        photo: p.getPhoto()\r\n                    }\r\n                })\r\n    \r\n                cb(data)\r\n            }).catch(err => {\r\n                console.log('get list fail', err)\r\n            })\r\n        } catch (err) {\r\n            cc.log('error:', err)\r\n        }\r\n    }\r\n\r\n    public setPlayerData(data, cb) {\r\n        try {\r\n            if (!FBInstant) return cb(null)\r\n        } catch (err) {\r\n            return cb(null)\r\n        }\r\n\r\n        const saveData = {}\r\n        saveData[DATA_KEY] = data\r\n\r\n        FBInstant.player.setDataAsync(saveData).then(() => {\r\n            cb(null)\r\n        }).catch((err) => {\r\n            cb(err)\r\n        });\r\n    }\r\n\r\n    public getPlayerData(cb) {\r\n        try {\r\n            if (!FBInstant) return cb(null, null)\r\n        } catch (err) {\r\n            return cb(null, null)\r\n        }\r\n\r\n        FBInstant.player.getDataAsync([DATA_KEY]).then((data) => {\r\n            cb(null, data[DATA_KEY])\r\n        }).catch((err) => {\r\n            cb(err, null)\r\n        });\r\n    }\r\n}\r\n"]}